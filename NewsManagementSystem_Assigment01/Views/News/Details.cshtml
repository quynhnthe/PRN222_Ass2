@model NewsManagementSystem_Assigment01.Models.NewsArticle
@using System.Security.Claims

<div class="container mt-5">
    <div class="card shadow-lg border-0 rounded-3">
        <div class="card-header bg-primary text-white text-center">
            <h2 class="mb-0">@Model.NewsTitle</h2>
        </div>
        <div class="card-body p-4">
            <h5 class="text-muted">@Model.Headline</h5>

            <div class="row mt-3">
                <div class="col-md-6">
                    <p><strong>Created Date:</strong> @Model.CreatedDate?.ToString("dd/MM/yyyy HH:mm")</p>
                    <p><strong>Last Modified:</strong> @Model.ModifiedDate?.ToString("dd/MM/yyyy HH:mm")</p>
                    <p><strong>Status:</strong> @(Model.NewsStatus == true ? "Published" : "Draft")</p>
                </div>
                <div class="col-md-6">
                    <p><strong>News Source:</strong> @Model.NewsSource</p>
                    <p><strong>Category:</strong> @Model?.Category?.CategoryName</p>
                    <p><strong>Created By:</strong> @Model.CreatedBy?.AccountName</p>
                </div>
            </div>

            <hr>
            <h5 class="mt-3">News Content</h5>
            <p class="text-justify">@Model.NewsContent</p>
        </div>
        <div class="card-footer text-center">
            @if (User.FindFirstValue(ClaimTypes.Role) == "1")
            {
                <a asp-action="Edit" asp-route-id="@Model?.NewsArticleId" class="btn btn-warning mx-2">Edit</a>
            }
            <a asp-action="Index" asp-controller="Home" class="btn btn-secondary">Back to List</a>
        </div>

        <!-- Phần Comment -->
        <div class="card-body p-4 border-top">
            <h5 class="mb-3">Comments</h5>

            <!-- Form thêm bình luận mới -->
            @if (Model == null || string.IsNullOrEmpty(Model.NewsArticleId))
            {
                <p class="text-danger">Error: News article not found.</p>
            }
            else if (User.Identity.IsAuthenticated)
            {
                var userIdString = User.FindFirstValue(ClaimTypes.NameIdentifier);
                if (string.IsNullOrEmpty(userIdString) || !short.TryParse(userIdString, out short userId))
                {
                    <p class="text-danger">Error: Invalid user ID. Please log in again or contact support.</p>
                }
                else if (userId < 0) // ID thường không âm
                {
                    <p class="text-danger">Error: User ID must be a positive number.</p>
                }
                else
                {
                    <form asp-action="Create" asp-controller="Comment" method="post" class="mb-4">
                        <input type="hidden" name="NewsArticleId" value="@Model.NewsArticleId" />
                        <input type="hidden" name="UserId" value="@userId" />
                        <div class="form-group">
                            <textarea name="Content" class="form-control" rows="3" placeholder="Write your comment..." required asp-validation-for="Content"></textarea>
                            
                        </div>
                        <button type="submit" class="btn btn-primary mt-2">Post Comment</button>
                    </form>
                }
            }
            else
            {
                <p>Please <a href="/Login">login</a> to post a comment.</p>
            }

            <!-- Danh sách bình luận -->
            <div id="comments-list">
                @if (Model.Comments != null && Model.Comments.Any())
                {
                    
                    foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                    {
                        <div class="comment mb-3 p-3 border rounded" id="comment-@comment.CommentId">
                            <p class="mb-1"><strong>@comment.User.AccountName</strong> <small class="text-muted">@comment.CreatedAt?.ToString("dd/MM/yyyy HH:mm")</small></p>
                            <p class="mb-1">@comment.Content</p>

                            @if (User.Identity.IsAuthenticated)
                            {
                                @if (User.FindFirstValue(ClaimTypes.NameIdentifier) == comment.UserId.ToString())
                                {
                                    <!-- Nút chỉnh sửa và xóa cho người tạo comment -->
                                    <button class="btn btn-sm btn-outline-primary edit-comment" data-id="@comment.CommentId">Edit</button>
                                    <form asp-action="Delete" asp-controller="Comment" method="post" class="d-inline delete-form">
                                        <input type="hidden" name="id" value="@comment.CommentId" />
                                        <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this comment?')">Delete</button>
                                    </form>
                                }
                                @if (User.FindFirstValue(ClaimTypes.Email) == "admin@FUNewsManagementSystem.org") // Quyền admin
                                {
                                    <!-- Nút xóa cho admin -->
                                    <form asp-action="Delete" asp-controller="Comment" method="post" class="d-inline delete-form">
                                        <input type="hidden" name="id" value="@comment.CommentId" />
                                        <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this comment?')">Delete (Admin)</button>
                                    </form>
                                }
                            }
                        </div>
                    }
                } else
                {
                    <p>No comments yet. Be the first to comment!</p>
                }
            </div>
        </div>
        
    </div>
    <!-- Thêm vào cuối file View của bạn, trước thẻ đóng </div> -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const editButtons = document.querySelectorAll('.edit-comment');

            editButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const commentId = this.getAttribute('data-id');
                    const commentDiv = document.getElementById(`comment-${commentId}`);
                    const contentP = commentDiv.querySelector('p.mb-1:nth-child(2)');
                    const originalContent = contentP.textContent;

                    contentP.style.display = 'none';
                    const buttons = commentDiv.querySelectorAll('button, form');
                    buttons.forEach(btn => btn.style.display = 'none');

                    const editForm = document.createElement('form');
                    editForm.setAttribute('action', '/Comment/Edit');
                    editForm.setAttribute('method', 'post');
                    editForm.innerHTML = `
        @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="${commentId}">
                            <textarea name="content" class="form-control mb-2" rows="2" required>${originalContent}</textarea>
                            <button type="submit" class="btn btn-sm btn-primary">Save</button>
                            <button type="button" class="btn btn-sm btn-secondary cancel-edit">Cancel</button>
                        `;

                    commentDiv.appendChild(editForm);

                    editForm.querySelector('.cancel-edit').addEventListener('click', function () {
                        editForm.remove();
                        contentP.style.display = 'block';
                        buttons.forEach(btn => btn.style.display = 'inline-block');
                    });
                });
            });
        });
    </script>
</div>
